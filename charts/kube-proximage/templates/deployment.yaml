apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: docker-proxy-webhook
  name: docker-proxy-webhook
  namespace: docker-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: docker-proxy-webhook
  template:
    metadata:
      labels:
        app: docker-proxy-webhook
    spec:
      affinity:
        podAntiAffinity:
          # do not schedule on the same node to avoid `hostNetwork` port conflicts
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                  - docker-proxy-webhook
      containers:
        - name: docker-proxy-webhook
          args:
            - -metrics-addr=:18080
            - -health-addr=:18081
            - -listen-port=19443
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # Graceful shutdown hack - sleep 15 seconds to give the k8s network
          # config time to update and stop routing new requests to this pod.
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - sleep 15
          ports:
            - containerPort: 19443
              protocol: TCP
              name: https
            - containerPort: 18080
              protocol: TCP
              name: metrics
            - containerPort: 18081
              protocol: TCP
              name: monitoring
#          resources:
#            requests:
#              memory: $REQUESTS_MEMORY
#              cpu: $REQUESTS_CPU
#            limits:
#              memory: $LIMITS_MEMORY
#              cpu: $LIMITS_CPU
          livenessProbe:
            httpGet:
              path: /healthz
              port: monitoring
            initialDelaySeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /readyz
              port: monitoring
            successThreshold: 1
            failureThreshold: 2
            periodSeconds: 5
            timeoutSeconds: 5
          volumeMounts:
            - mountPath: /tmp/k8s-webhook-server/serving-certs
              name: cert
              readOnly: true
            - mountPath: /tmp/config
              name: docker-proxy-config
              readOnly: true
      hostNetwork: true
      #hostPort: 19443  // does this work in EKS now?
      volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: docker-proxy-webhook-certificate
        - name: docker-proxy-config
          configMap:
            name: docker-proxy-config